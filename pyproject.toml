[tool.black]
line-length = 145
include = '\.pyi?$'
extend-exclude = '^/venv'


[tool.isort]
profile = "hug"
src_paths = ["pokemon_data_scraper", "flask_app", "test"]
skip_glob = ["venv/*"]


[mypy]
python_version = 3.9
disallow_untyped_defs = true
ignore_missing_imports = true


[tool.pylint.main]
analyse-fallback-blocks = "no"
extension-pkg-allow-list = ""
extension-pkg-whitelist= ""
fail-on = ""
fail-under = 10
# Files or directories to be skipped. They should be base names, not paths.
ignore = "CVS"
ignore-paths = ""
ignored-modules = "venv"
jobs = 1
limit-inference-results = 100
load-plugins=""
persistent = "yes"
# Minimum Python version to use for version dependent checks. Will default to
# the version used to run pylint.
py-version = "3.9"
# Discover python modules and packages in the file system subtree.
recursive = "no"
suggestion-mode = "yes"
unsafe-load-any-extension = "no"

[tool.pylint.reports]
# Python expression which should return a score less than or equal to 10. You
# have access to the variables 'fatal', 'error', 'warning', 'refactor',
# 'convention', and 'info' which contain the number of messages in each
# category, as well as 'statement' which is the total number of statements
# analyzed. This score is used by the global evaluation report (RP0004).
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"
# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details.
msg-template = ""
reports = "no"
# Activate the evaluation score.
score = "yes"

[tool.pylint.messages_control]
# Only show warnings with the listed confidence levels. Leave empty to show
# all. Valid levels: HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE,
# UNDEFINED.
confidence=["HIGH",
           "CONTROL_FLOW",
           "INFERENCE",
           "INFERENCE_FAILURE",
           "UNDEFINED"]
disable=["raw-checker-failed",
        "bad-inline-option",
        "locally-disabled",
        "file-ignored",
        "suppressed-message",
        "useless-suppression",
        "deprecated-pragma",
        "use-symbolic-message-instead"]
enable = "c-extension-no-member"

[tool.pytlint.logging]
# The type of string formatting that logging methods do. `old` means using %
# formatting, `new` is for `{}` formatting.
logging-format-style="old"
# Logging modules to check that the string format arguments are in logging
# function parameter format.
logging-modules="logging"

[tool.pylint.spelling]
# Limits count of emitted suggestions for spelling mistakes.
max-spelling-suggestions=4
spelling-dict=""
spelling-ignore-comment-directives="fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:"
spelling-ignore-words=""
spelling-private-dict-file=""
spelling-store-unknown-words="no"

[tool.pylint.miscellaneous]
# List of note tags to take in consideration, separated by a comma.
notes=["FIXME",
      "XXX",
      "TODO"]
notes-rgx=""

[tool.pylint.typecheck]
contextmanager-decorators="contextlib.contextmanager"
generated-members=""
ignore-none="yes"
ignore-on-opaque-inference="yes"
# List of symbolic message names to ignore for Mixin members.
ignored-checks-for-mixins=["no-member",
                          "not-async-context-manager",
                          "not-context-manager",
                          "attribute-defined-outside-init"]
ignored-classes=["optparse.Values","thread._local","_thread._local","argparse.Namespace"]
missing-member-hint="yes"
missing-member-hint-distance=1
missing-member-max-choices=1
mixin-class-rgx=".*[Mm]ixin"
signature-mutators=""

[tool.pylint.classes]
check-protected-access-in-special-methods="no"
defining-attr-methods=["__init__",
                      "__new__",
                      "setUp",
                      "__post_init__"]
exclude-protected=["_asdict",
                  "_fields",
                  "_replace",
                  "_source",
                  "_make"]
valid-classmethod-first-arg="cls"
valid-metaclass-classmethod-first-arg="cls"

[tool.pylint.variables]
additional-builtins=""
allow-global-unused-variables="yes"
allowed-redefined-builtins=""
callbacks=["cb_",
          "_cb"]
# A regular expression matching the name of dummy variables (i.e. expected to
# not be used).
dummy-variables-rgx="_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
# Argument names that match this expression will be ignored. Default to name
# with leading underscore.
ignored-argument-names="_.*|^ignored_|^unused_"
init-import="no"
redefining-builtins-modules=["six.moves","past.builtins","future.builtins","builtins","io"]

[tool.pylint.format]
# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format=""
# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines="^\\s*(# )?<?https?://\\S+>?$"
# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren=4
# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string='    '
# Maximum number of characters on a single line.
max-line-length=145
# Maximum number of lines in a module.
max-module-lines=1000
single-line-class-stmt="no"
single-line-if-stmt="no"

[tool.pylint.imports]
allow-any-import-level=""
allow-wildcard-with-all="no"
deprecated-modules=""
ext-import-graph=""
import-graph=""
int-import-graph=""
known-standard-library=""
known-third-party="enchant"
preferred-modules=""

[tool.pylint.exceptions]
# Exceptions that will emit a warning when caught.
overgeneral-exceptions=["BaseException",
                       "Exception"]


[tool.pylint.refactoring]
# Maximum number of nested blocks for function / method body
max-nested-blocks=7
# Complete name of functions that never returns. When checking for
# inconsistent-return-statements if a never returning function is called then
# it will be considered as an explicit return statement and no message will be
# printed.
never-returning-functions=["sys.exit","argparse.parse_error"]

[tool.pylint.similarities]
ignore-comments="yes"
ignore-docstrings="yes"
ignore-imports="yes"
ignore-signatures="yes"
min-similarity-lines=4


[tool.pylint.design]
# List of regular expressions of class ancestor names to ignore when counting
# public methods (see R0903)
exclude-too-few-public-methods=""
ignored-parents=""
# Maximum number of arguments for function / method.
max-args=5
# Maximum number of attributes for a class (see R0902).
max-attributes=7
# Maximum number of boolean expressions in an if statement (see R0916).
max-bool-expr=5
# Maximum number of branch for function / method body.
max-branches=12
# Maximum number of locals for function / method body.
max-locals=30
# Maximum number of parents for a class (see R0901).
max-parents=7
# Maximum number of public methods for a class (see R0904).
max-public-methods=20
# Maximum number of return / yield for function / method body.
max-returns=6
# Maximum number of statements in function / method body.
max-statements=60
# Minimum number of public methods for a class (see R0903).
min-public-methods=2

[tool.pylint.string]
check-quote-consistency="no"
check-str-concat-over-line-jumps="no"


[tool.pylint.basic]
# Naming style matching correct argument names.
argument-naming-style="snake_case"
attr-naming-style="snake_case"
bad-names=["foo",
          "bar",
          "baz",
          "toto",
          "tutu",
          "tata"]
bad-names-rgxs=""
class-attribute-naming-style="any"
class-const-naming-style="UPPER_CASE"
class-naming-style="PascalCase"
const-naming-style="UPPER_CASE"
docstring-min-length=-1
function-naming-style="snake_case"
good-names=["i",
           "j",
           "k",
           "ex",
           "Run",
           "_"]
good-names-rgxs=""
include-naming-hint="no"
inlinevar-naming-style="any"
method-naming-style="snake_case"
module-naming-style="snake_case"
name-group=""
no-docstring-rgx="^_"
property-classes="abc.abstractproperty"
variable-naming-style="snake_case"